datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider        = "go run github.com/prisma/prisma-client-go"
  output          = "../models"
  package         = "models"
  previewFeatures = ["fullTextSearch"]
}

model Address {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  city           String
  state          String
  pincode        String
  roomNumber     String
  buildingNumber String
  userId         Int?     @unique
  User           User?    @relation(fields: [userId], references: [id])
}

model Resource {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String
  description    String
  totalLevelSum Int
  Permissions    Permissions[]
}

model Permissions {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  resource        Resource @relation(fields: [resourceId], references: [id])
  resourceId      Int      @unique
  permissionLevel Int
  Role            Role?    @relation(fields: [roleId], references: [id])
  roleId          Int?
}

model Role {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  description String        @default("")
  permissions Permissions[]
  User        User[]
  isDeleted   Boolean
}

model Availability {
  id        Int      @id @default(autoincrement())
  day       Int
  timeStart DateTime
  timeEnd   DateTime
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?
}

model User {
  id        Int       @id @default(autoincrement())
  // userId is any ID like, employee ID, student ID, Aadhar Number etc.
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  name      String?
  addresses Address[]
  profile   Profile?
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  isDeleted Boolean
}

model Profile {
  id                   Int            @id @default(autoincrement())
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  userId               Int            @unique
  User                 User           @relation(fields: [userId], references: [id])
  bio                  String?
  roomNumber           String?
  sex                  Int            @default(0)
  age                  Int
  contactNumber        String
  email                String
  maritalStatus        Int            @default(0)
  bloodGroup           Int            @default(0)
  origin               String?
  lastVisit            DateTime?
  designation          String?
  department           String?
  leave                Leave[]
  availability         Availability[]
  doctorAppointment    Appointment[]  @relation(name: "doctor")
  patientAppointment   Appointment[]  @relation(name: "patient")
  referredAppointments Appointment[]
}

model Leave {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  User      Profile  @relation(fields: [userId], references: [id])
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  dateTime     DateTime
  status       Int            @default(0)
  doctorId     Int
  doctor       Profile        @relation(name: "doctor", fields: [doctorId], references: [id])
  patientId    Int
  patient      Profile        @relation(name: "patient", fields: [patientId], references: [id])
  remarks      String?
  referredBy   Profile?       @relation(fields: [profileId], references: [id])
  profileId    Int?
  pending      Boolean        @default(true)
  Prescription Prescription[]
}

model Consumables {
  // this include everything that can be consumed by a patient
  // this includes ingestables, injectables, others
  // like medicines, injections, etc.

  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  type            Int? // refer the enum MedicineType 
  quantityLeft    String
  quantityPerUnit Int      @default(1) // in case of tablets, it is number of tablets in a strip, for syrups, it is number of ml in a bottle
  batchNumber     String?
  manufacturer    String?
  expiryDate      DateTime

  PrescribedMedicine PrescribedMedicine[]
}

model NonConsumables {
  // this include everything that cannot be consumed by a patient
  // and used by the hospital for any purpose
  // like beds, lab-coat, chairs, wheelchairs,  etc.

  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  name              String
  availableQuantity Int
  type              Int? // refer the enum NonConsumableType
  servicingTime     Int? // time duration (in the label below)
  servicingTimeUnit Int? // see enum ServicingTimeUnit for more info
}

model PrescribedMedicine {
  id             Int           @id @default(autoincrement())
  medicine       Consumables   @relation(fields: [consumablesId], references: [id])
  dosage         Int // see the DOSAGE enum implementation
  Prescription   Prescription? @relation(fields: [prescriptionId], references: [id])
  prescriptionId Int?
  consumablesId  Int
}

model Prescription {
  id            Int                  @id @default(autoincrement())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  appointmentId Int
  appointment   Appointment          @relation(fields: [appointmentId], references: [id])
  medicine      String
  remarks       String?
  medicines     PrescribedMedicine[]
}
