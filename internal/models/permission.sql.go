// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: permission.sql

package models

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createNewPermission = `-- name: CreateNewPermission :one
INSERT INTO "Permission" ("name", "description", "resourceId")
VALUES ($1, $2, $3)
RETURNING id, name, description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted"
`

type CreateNewPermissionParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ResourceId  int32  `json:"resourceId"`
}

func (q *Queries) CreateNewPermission(ctx context.Context, arg CreateNewPermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createNewPermission, arg.Name, arg.Description, arg.ResourceId)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.RoleIds),
		&i.ResourceId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getAllDeletedPermissions = `-- name: GetAllDeletedPermissions :many
SELECT id, name, description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted"
FROM "Permission"
WHERE "isDeleted" = FALSE
`

func (q *Queries) GetAllDeletedPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getAllDeletedPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			pq.Array(&i.RoleIds),
			&i.ResourceId,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPermissions = `-- name: GetAllPermissions :many
SELECT id, name, description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted"
FROM "Permission"
WHERE "isDeleted" = FALSE
`

func (q *Queries) GetAllPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getAllPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			pq.Array(&i.RoleIds),
			&i.ResourceId,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionById = `-- name: GetPermissionById :one
SELECT id, name, description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted"
FROM "Permission"
WHERE "id" = $1
	AND "isDeleted" = FALSE
`

func (q *Queries) GetPermissionById(ctx context.Context, id int32) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermissionById, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.RoleIds),
		&i.ResourceId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getPermissionByName = `-- name: GetPermissionByName :one
SELECT id, name, description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted"
FROM "Permission"
WHERE "name" = $1
	AND "isDeleted" = FALSE
`

func (q *Queries) GetPermissionByName(ctx context.Context, name string) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermissionByName, name)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.RoleIds),
		&i.ResourceId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getPermissionByResource = `-- name: GetPermissionByResource :many
SELECT id, name, description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted"
FROM "Permission"
WHERE "resourceId" = $1
	AND "isDeleted" = FALSE
`

func (q *Queries) GetPermissionByResource(ctx context.Context, resourceid int32) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionByResource, resourceid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			pq.Array(&i.RoleIds),
			&i.ResourceId,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionDetailsWithRoles = `-- name: GetPermissionDetailsWithRoles :one
SELECT "Permission".id, "Permission".name, "Permission".description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted", "Role".id, "Role".name, "Role".description, "userIds", "createdAt", "updatedAt", "isDeleted"
FROM "Permission"
	INNER JOIN "Role" ON "Permission"."id" = "Role"."permissionId"
WHERE "Permission"."id" = $1
`

type GetPermissionDetailsWithRolesRow struct {
	ID            int32     `json:"id"`
	Name          string    `json:"name"`
	Description   string    `json:"description"`
	RoleIds       []int32   `json:"roleIds"`
	ResourceId    int32     `json:"resourceId"`
	CreatedAt     time.Time `json:"createdAt"`
	UpdatedAt     time.Time `json:"updatedAt"`
	IsDeleted     bool      `json:"isDeleted"`
	ID_2          int32     `json:"id_2"`
	Name_2        string    `json:"name_2"`
	Description_2 string    `json:"description_2"`
	UserIds       []int32   `json:"userIds"`
	CreatedAt_2   time.Time `json:"createdAt_2"`
	UpdatedAt_2   time.Time `json:"updatedAt_2"`
	IsDeleted_2   bool      `json:"isDeleted_2"`
}

func (q *Queries) GetPermissionDetailsWithRoles(ctx context.Context, id int32) (GetPermissionDetailsWithRolesRow, error) {
	row := q.db.QueryRowContext(ctx, getPermissionDetailsWithRoles, id)
	var i GetPermissionDetailsWithRolesRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.RoleIds),
		&i.ResourceId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.ID_2,
		&i.Name_2,
		&i.Description_2,
		pq.Array(&i.UserIds),
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.IsDeleted_2,
	)
	return i, err
}

const unDeletePermission = `-- name: UnDeletePermission :one
UPDATE "Permission"
SET "isDeleted" = FALSE
WHERE "id" = $1
RETURNING id, name, description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted"
`

func (q *Queries) UnDeletePermission(ctx context.Context, id int32) (Permission, error) {
	row := q.db.QueryRowContext(ctx, unDeletePermission, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.RoleIds),
		&i.ResourceId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updatePermissionAllFields = `-- name: UpdatePermissionAllFields :one
UPDATE "Permission"
SET "name" = $1,
	"description" = $2,
	"resourceId" = $3
WHERE "id" = $4
	AND "isDeleted" = FALSE
RETURNING id, name, description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted"
`

type UpdatePermissionAllFieldsParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ResourceId  int32  `json:"resourceId"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdatePermissionAllFields(ctx context.Context, arg UpdatePermissionAllFieldsParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, updatePermissionAllFields,
		arg.Name,
		arg.Description,
		arg.ResourceId,
		arg.ID,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.RoleIds),
		&i.ResourceId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updatePermissionDescription = `-- name: UpdatePermissionDescription :one
UPDATE "Permission"
SET "description" = $1
WHERE "id" = $2
	AND "isDeleted" = FALSE
RETURNING id, name, description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted"
`

type UpdatePermissionDescriptionParams struct {
	Description string `json:"description"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdatePermissionDescription(ctx context.Context, arg UpdatePermissionDescriptionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, updatePermissionDescription, arg.Description, arg.ID)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.RoleIds),
		&i.ResourceId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updatePermissionName = `-- name: UpdatePermissionName :one
UPDATE "Permission"
SET name = $1
WHERE "id" = $2
	AND DELETED = FALSE
RETURNING id, name, description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted"
`

type UpdatePermissionNameParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdatePermissionName(ctx context.Context, arg UpdatePermissionNameParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, updatePermissionName, arg.Name, arg.ID)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.RoleIds),
		&i.ResourceId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updatePermissionResourceId = `-- name: UpdatePermissionResourceId :one
UPDATE "Permission"
SET "resourceId" = $1
WHERE "id" = $2
	AND "isDeleted" = FALSE
RETURNING id, name, description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted"
`

type UpdatePermissionResourceIdParams struct {
	ResourceId int32 `json:"resourceId"`
	ID         int32 `json:"id"`
}

func (q *Queries) UpdatePermissionResourceId(ctx context.Context, arg UpdatePermissionResourceIdParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, updatePermissionResourceId, arg.ResourceId, arg.ID)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.RoleIds),
		&i.ResourceId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
