// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: user_auth.sql

package models

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO "User" ("userId", "name", "email", "password")
VALUES ($1, $2, $3, $4)
RETURNING id, "userId", email, password, name, "roleIds", "profileId", "createdAt", "updatedAt", "isDeleted"
`

type CreateAdminParams struct {
	UserId   sql.NullString `json:"userId"`
	Name     string         `json:"name"`
	Email    string         `json:"email"`
	Password string         `json:"password"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createAdmin,
		arg.UserId,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.Email,
		&i.Password,
		&i.Name,
		pq.Array(&i.RoleIds),
		&i.ProfileId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const createDeveloper = `-- name: CreateDeveloper :one
INSERT INTO "User" ("userId", "name", "email", "password")
VALUES ($1, $2, $3, $4)
RETURNING id, "userId", email, password, name, "roleIds", "profileId", "createdAt", "updatedAt", "isDeleted"
`

type CreateDeveloperParams struct {
	UserId   sql.NullString `json:"userId"`
	Name     string         `json:"name"`
	Email    string         `json:"email"`
	Password string         `json:"password"`
}

func (q *Queries) CreateDeveloper(ctx context.Context, arg CreateDeveloperParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createDeveloper,
		arg.UserId,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.Email,
		&i.Password,
		&i.Name,
		pq.Array(&i.RoleIds),
		&i.ProfileId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "User" ("userId", "name", "email", "password")
VALUES ($1, $2, $3, $4)
RETURNING id, "userId", email, password, name, "roleIds", "profileId", "createdAt", "updatedAt", "isDeleted"
`

type CreateUserParams struct {
	UserId   sql.NullString `json:"userId"`
	Name     string         `json:"name"`
	Email    string         `json:"email"`
	Password string         `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserId,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.Email,
		&i.Password,
		&i.Name,
		pq.Array(&i.RoleIds),
		&i.ProfileId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
