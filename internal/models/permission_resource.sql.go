// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: permission_resource.sql

package models

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createResource = `-- name: CreateResource :one
INSERT INTO "Resource" ("name", "description", "totalLevelsSum")
VALUES ($1, $2, $3)
RETURNING id, name, description, "totalLevelsSum", "createdAt", "updatedAt", "isDeleted"
`

type CreateResourceParams struct {
	Name           string `json:"name"`
	Description    string `json:"description"`
	TotalLevelsSum int32  `json:"totalLevelsSum"`
}

func (q *Queries) CreateResource(ctx context.Context, arg CreateResourceParams) (Resource, error) {
	row := q.db.QueryRowContext(ctx, createResource, arg.Name, arg.Description, arg.TotalLevelsSum)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TotalLevelsSum,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getAllDeletedResources = `-- name: GetAllDeletedResources :many
SELECT id, name, description, "totalLevelsSum", "createdAt", "updatedAt", "isDeleted"
FROM "Resource"
WHERE "isDeleted" = FALSE
`

func (q *Queries) GetAllDeletedResources(ctx context.Context) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, getAllDeletedResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.TotalLevelsSum,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllResources = `-- name: GetAllResources :many
SELECT id, name, description, "totalLevelsSum", "createdAt", "updatedAt", "isDeleted"
FROM "Resource"
WHERE "isDeleted" = FALSE
`

func (q *Queries) GetAllResources(ctx context.Context) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, getAllResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.TotalLevelsSum,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourceById = `-- name: GetResourceById :one
SELECT id, name, description, "totalLevelsSum", "createdAt", "updatedAt", "isDeleted"
FROM "Resource"
WHERE "id" = $1
	AND "isDeleted" = FALSE
`

func (q *Queries) GetResourceById(ctx context.Context, id int32) (Resource, error) {
	row := q.db.QueryRowContext(ctx, getResourceById, id)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TotalLevelsSum,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getResourceByLevel = `-- name: GetResourceByLevel :many
SELECT id, name, description, "totalLevelsSum", "createdAt", "updatedAt", "isDeleted"
FROM "Resource"
WHERE "totalLevelsSum" = $1
	AND "isDeleted" = FALSE
`

func (q *Queries) GetResourceByLevel(ctx context.Context, totallevelssum int32) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, getResourceByLevel, totallevelssum)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.TotalLevelsSum,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourceByLevelRange = `-- name: GetResourceByLevelRange :many
SELECT id, name, description, "totalLevelsSum", "createdAt", "updatedAt", "isDeleted"
FROM "Resource"
WHERE "totalLevelsSum" >= $1
	AND "totalLevelsSum" <= $2
	AND "isDeleted" = FALSE
`

type GetResourceByLevelRangeParams struct {
	TotalLevelsSum   int32 `json:"totalLevelsSum"`
	TotalLevelsSum_2 int32 `json:"totalLevelsSum_2"`
}

func (q *Queries) GetResourceByLevelRange(ctx context.Context, arg GetResourceByLevelRangeParams) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, getResourceByLevelRange, arg.TotalLevelsSum, arg.TotalLevelsSum_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.TotalLevelsSum,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourceByName = `-- name: GetResourceByName :one
SELECT id, name, description, "totalLevelsSum", "createdAt", "updatedAt", "isDeleted"
FROM "Resource"
WHERE "name" = $1
	AND "isDeleted" = FALSE
`

func (q *Queries) GetResourceByName(ctx context.Context, name string) (Resource, error) {
	row := q.db.QueryRowContext(ctx, getResourceByName, name)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TotalLevelsSum,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getResourceDetailsWithPermissions = `-- name: GetResourceDetailsWithPermissions :one
SELECT "Resource".id, "Resource".name, "Resource".description, "totalLevelsSum", "createdAt", "updatedAt", "isDeleted", "Permission".id, "Permission".name, "Permission".description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted"
FROM "Resource"
	INNER JOIN "Permission" ON "Resource"."id" = "Permission"."resourceId"
WHERE "Resource"."id" = $1
`

type GetResourceDetailsWithPermissionsRow struct {
	ID             int32     `json:"id"`
	Name           string    `json:"name"`
	Description    string    `json:"description"`
	TotalLevelsSum int32     `json:"totalLevelsSum"`
	CreatedAt      time.Time `json:"createdAt"`
	UpdatedAt      time.Time `json:"updatedAt"`
	IsDeleted      bool      `json:"isDeleted"`
	ID_2           int32     `json:"id_2"`
	Name_2         string    `json:"name_2"`
	Description_2  string    `json:"description_2"`
	RoleIds        []int32   `json:"roleIds"`
	ResourceId     int32     `json:"resourceId"`
	CreatedAt_2    time.Time `json:"createdAt_2"`
	UpdatedAt_2    time.Time `json:"updatedAt_2"`
	IsDeleted_2    bool      `json:"isDeleted_2"`
}

func (q *Queries) GetResourceDetailsWithPermissions(ctx context.Context, id int32) (GetResourceDetailsWithPermissionsRow, error) {
	row := q.db.QueryRowContext(ctx, getResourceDetailsWithPermissions, id)
	var i GetResourceDetailsWithPermissionsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TotalLevelsSum,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.ID_2,
		&i.Name_2,
		&i.Description_2,
		pq.Array(&i.RoleIds),
		&i.ResourceId,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.IsDeleted_2,
	)
	return i, err
}

const unDeleteResource = `-- name: UnDeleteResource :one
UPDATE "Resource"
SET "isDeleted" = FALSE
WHERE "id" = $1
RETURNING id, name, description, "totalLevelsSum", "createdAt", "updatedAt", "isDeleted"
`

func (q *Queries) UnDeleteResource(ctx context.Context, id int32) (Resource, error) {
	row := q.db.QueryRowContext(ctx, unDeleteResource, id)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TotalLevelsSum,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateResourceAllFields = `-- name: UpdateResourceAllFields :one
UPDATE "Resource"
SET "name" = $1,
	"description" = $2,
	"totalLevelsSum" = $3
WHERE "id" = $4
	AND "isDeleted" = FALSE
RETURNING id, name, description, "totalLevelsSum", "createdAt", "updatedAt", "isDeleted"
`

type UpdateResourceAllFieldsParams struct {
	Name           string `json:"name"`
	Description    string `json:"description"`
	TotalLevelsSum int32  `json:"totalLevelsSum"`
	ID             int32  `json:"id"`
}

func (q *Queries) UpdateResourceAllFields(ctx context.Context, arg UpdateResourceAllFieldsParams) (Resource, error) {
	row := q.db.QueryRowContext(ctx, updateResourceAllFields,
		arg.Name,
		arg.Description,
		arg.TotalLevelsSum,
		arg.ID,
	)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TotalLevelsSum,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateResourceDescription = `-- name: UpdateResourceDescription :one
UPDATE "Resource"
SET "description" = $1
WHERE "id" = $2
	AND "isDeleted" = FALSE
RETURNING id, name, description, "totalLevelsSum", "createdAt", "updatedAt", "isDeleted"
`

type UpdateResourceDescriptionParams struct {
	Description string `json:"description"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateResourceDescription(ctx context.Context, arg UpdateResourceDescriptionParams) (Resource, error) {
	row := q.db.QueryRowContext(ctx, updateResourceDescription, arg.Description, arg.ID)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TotalLevelsSum,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateResourceName = `-- name: UpdateResourceName :one
UPDATE "Resource"
SET "name" = $1
WHERE "id" = $2
	AND "isDeleted" = FALSE
RETURNING id, name, description, "totalLevelsSum", "createdAt", "updatedAt", "isDeleted"
`

type UpdateResourceNameParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateResourceName(ctx context.Context, arg UpdateResourceNameParams) (Resource, error) {
	row := q.db.QueryRowContext(ctx, updateResourceName, arg.Name, arg.ID)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TotalLevelsSum,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateResourceTotalLevelSum = `-- name: UpdateResourceTotalLevelSum :one
UPDATE "Resource"
SET "totalLevelsSum" = $1
WHERE "id" = $2
	AND "isDeleted" = FALSE
RETURNING id, name, description, "totalLevelsSum", "createdAt", "updatedAt", "isDeleted"
`

type UpdateResourceTotalLevelSumParams struct {
	TotalLevelsSum int32 `json:"totalLevelsSum"`
	ID             int32 `json:"id"`
}

func (q *Queries) UpdateResourceTotalLevelSum(ctx context.Context, arg UpdateResourceTotalLevelSumParams) (Resource, error) {
	row := q.db.QueryRowContext(ctx, updateResourceTotalLevelSum, arg.TotalLevelsSum, arg.ID)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TotalLevelsSum,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
