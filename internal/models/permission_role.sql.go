// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: permission_role.sql

package models

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createNewRole = `-- name: CreateNewRole :one
INSERT INTO "Role" ("name", "description")
VALUES ($1, $2)
RETURNING id, name, description, "userIds", "createdAt", "updatedAt", "isDeleted"
`

type CreateNewRoleParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateNewRole(ctx context.Context, arg CreateNewRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createNewRole, arg.Name, arg.Description)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.UserIds),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getAllDeletedRoles = `-- name: GetAllDeletedRoles :many
SELECT id, name, description, "userIds", "createdAt", "updatedAt", "isDeleted"
FROM "Role"
WHERE "isDeleted" = FALSE
`

func (q *Queries) GetAllDeletedRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getAllDeletedRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			pq.Array(&i.UserIds),
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRoles = `-- name: GetAllRoles :many
SELECT id, name, description, "userIds", "createdAt", "updatedAt", "isDeleted"
FROM "Role"
WHERE "isDeleted" = FALSE
`

func (q *Queries) GetAllRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			pq.Array(&i.UserIds),
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleById = `-- name: GetRoleById :one
SELECT id, name, description, "userIds", "createdAt", "updatedAt", "isDeleted"
FROM "Role"
WHERE "id" = $1
	AND "isDeleted" = FALSE
`

func (q *Queries) GetRoleById(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleById, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.UserIds),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name, description, "userIds", "createdAt", "updatedAt", "isDeleted"
FROM "Role"
WHERE "name" = $1
	AND "isDeleted" = FALSE
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.UserIds),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getRoleDetailsWithPermissions = `-- name: GetRoleDetailsWithPermissions :one
SELECT "Role".id, "Role".name, "Role".description, "userIds", "createdAt", "updatedAt", "isDeleted", "Permission".id, "Permission".name, "Permission".description, "roleIds", "resourceId", "createdAt", "updatedAt", "isDeleted"
FROM "Role"
	INNER JOIN "Permission" ON "Role"."id" = "Permission"."roleId"
WHERE "Role"."id" = $1
`

type GetRoleDetailsWithPermissionsRow struct {
	ID            int32     `json:"id"`
	Name          string    `json:"name"`
	Description   string    `json:"description"`
	UserIds       []int32   `json:"userIds"`
	CreatedAt     time.Time `json:"createdAt"`
	UpdatedAt     time.Time `json:"updatedAt"`
	IsDeleted     bool      `json:"isDeleted"`
	ID_2          int32     `json:"id_2"`
	Name_2        string    `json:"name_2"`
	Description_2 string    `json:"description_2"`
	RoleIds       []int32   `json:"roleIds"`
	ResourceId    int32     `json:"resourceId"`
	CreatedAt_2   time.Time `json:"createdAt_2"`
	UpdatedAt_2   time.Time `json:"updatedAt_2"`
	IsDeleted_2   bool      `json:"isDeleted_2"`
}

func (q *Queries) GetRoleDetailsWithPermissions(ctx context.Context, id int32) (GetRoleDetailsWithPermissionsRow, error) {
	row := q.db.QueryRowContext(ctx, getRoleDetailsWithPermissions, id)
	var i GetRoleDetailsWithPermissionsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.UserIds),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.ID_2,
		&i.Name_2,
		&i.Description_2,
		pq.Array(&i.RoleIds),
		&i.ResourceId,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.IsDeleted_2,
	)
	return i, err
}

const unDeleteRole = `-- name: UnDeleteRole :one
UPDATE "Role"
SET "isDeleted" = FALSE
WHERE "id" = $1
RETURNING id, name, description, "userIds", "createdAt", "updatedAt", "isDeleted"
`

func (q *Queries) UnDeleteRole(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRowContext(ctx, unDeleteRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.UserIds),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateRoleAllFields = `-- name: UpdateRoleAllFields :one
UPDATE "Role"
SET "name" = $1,
	"description" = $2
WHERE "id" = $3
	AND "isDeleted" = FALSE
RETURNING id, name, description, "userIds", "createdAt", "updatedAt", "isDeleted"
`

type UpdateRoleAllFieldsParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateRoleAllFields(ctx context.Context, arg UpdateRoleAllFieldsParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRoleAllFields, arg.Name, arg.Description, arg.ID)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.UserIds),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateRoleDescription = `-- name: UpdateRoleDescription :one
UPDATE "Role"
SET "description" = $1
WHERE "id" = $2
	AND "isDeleted" = FALSE
RETURNING id, name, description, "userIds", "createdAt", "updatedAt", "isDeleted"
`

type UpdateRoleDescriptionParams struct {
	Description string `json:"description"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateRoleDescription(ctx context.Context, arg UpdateRoleDescriptionParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRoleDescription, arg.Description, arg.ID)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.UserIds),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateRoleName = `-- name: UpdateRoleName :one
UPDATE "Role"
SET "name" = $1
WHERE "id" = $2
	AND "isDeleted" = FALSE
RETURNING id, name, description, "userIds", "createdAt", "updatedAt", "isDeleted"
`

type UpdateRoleNameParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateRoleName(ctx context.Context, arg UpdateRoleNameParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRoleName, arg.Name, arg.ID)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.UserIds),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
